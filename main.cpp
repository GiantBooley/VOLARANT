#include <glad/glad.h>
#define GLFW_INCLUDE_NONE
#include <GLFW/glfw3.h>
#include <iostream>

#include "linmath.h"
#include <stb/stb_image.h>

#include <stdlib.h>
#include <stdio.h>

static struct
{
    float x, y;
    float r, g, b;
} vertices[99] =
{
    {0.953125*2.f-1.f,0.9875*-2.f+1.f,0.37932891989458317,0.3568300558769114,0.326207046829051},
    {0.8859375*2.f-1.f,0.5541666666666667*-2.f+1.f,0.48711615522158025,0.11381205762907542,0.14695434674139218},
    {0.8453125*2.f-1.f,0.9166666666666666*-2.f+1.f,0.23438282064780747,0.6830264261959762,0.9764422606931641},
    {0.8546875*2.f-1.f,0.6979166666666666*-2.f+1.f,0.3639749329625861,0.25219192405675483,0.8544057996950727},
    {0.6078125*2.f-1.f,0.5270833333333333*-2.f+1.f,0.6626364621271247,0.4467618288716536,0.056690065444419235},
    {0.8734375*2.f-1.f,0.5645833333333333*-2.f+1.f,0.5000652119383783,0.703439592042757,0.2322102586400253},
    {0.875*2.f-1.f,0.5479166666666667*-2.f+1.f,0.5251420550968,0.611992132071487,0.23869547685902914},
    {0.615625*2.f-1.f,0.525*-2.f+1.f,0.5435692487949474,0.08168560010826598,0.8071134149903179},
    {0.64375*2.f-1.f,0.48333333333333334*-2.f+1.f,0.24658263052386709,0.3740012032036151,0.09241733099537719},
    {0.8734375*2.f-1.f,0.5833333333333334*-2.f+1.f,0.232205992763734,0.7849774756401248,0.629482606984474},
    {0.64375*2.f-1.f,0.5479166666666667*-2.f+1.f,0.004845610925158672,0.5263120609068861,0.4740461778491558},
    {0.6375*2.f-1.f,0.5083333333333333*-2.f+1.f,0.3696388238627617,0.3419234820953584,0.6617109250605442},
    {0.865625*2.f-1.f,0.56875*-2.f+1.f,0.320730431541423,0.9778211369848956,0.7800450307757062},
    {0.8484375*2.f-1.f,0.5333333333333333*-2.f+1.f,0.007653968530153654,0.21074849219402214,0.8666994560854856},
    {0.7203125*2.f-1.f,0.5375*-2.f+1.f,0.15773526554368733,0.28136270817072995,0.9356422592901256},
    {0.8515625*2.f-1.f,0.8041666666666667*-2.f+1.f,0.053308108386319164,0.7040113925516892,0.35841643439112325},
    {0.8*2.f-1.f,0.6708333333333333*-2.f+1.f,0.2659156484965932,0.8836434182861337,0.7345756668317497},
    {0.8671875*2.f-1.f,0.7875*-2.f+1.f,0.08228900473614464,0.5426479126130729,0.65256197387618},
    {0.2375*2.f-1.f,0.7520833333333333*-2.f+1.f,0.6769275224828167,0.6857406418458978,0.7377070846570356},
    {0.2578125*2.f-1.f,0.5604166666666667*-2.f+1.f,0.4807159608143562,0.29151092135352186,0.5626561908286453},
    {0.2984375*2.f-1.f,0.5729166666666666*-2.f+1.f,0.16940249401946283,0.8800950584732032,0.8262234400220531},
    {0.24375*2.f-1.f,0.7395833333333334*-2.f+1.f,0.3736372444892928,0.25007874059911184,0.4989931941287},
    {0.3*2.f-1.f,0.7479166666666667*-2.f+1.f,0.7176396786959148,0.4811813745765916,0.8184007729149448},
    {0.296875*2.f-1.f,0.5708333333333333*-2.f+1.f,0.2615823925530206,0.6983415110080128,0.5832383639440559},
    {0.35625*2.f-1.f,0.7354166666666667*-2.f+1.f,0.8120319760062626,0.22213008816468116,0.4858020408845821},
    {0.3875*2.f-1.f,0.7458333333333333*-2.f+1.f,0.010049058491164331,0.6480022493754458,0.7562717927250358},
    {0.384375*2.f-1.f,0.5770833333333333*-2.f+1.f,0.2568562359077068,0.40003091148817316,0.4144734931771439},
    {0.3828125*2.f-1.f,0.5833333333333334*-2.f+1.f,0.5143211650347763,0.44664105285452815,0.320968268029292},
    {0.3515625*2.f-1.f,0.5729166666666666*-2.f+1.f,0.5202984339888596,0.20464974160176153,0.5649734791340278},
    {0.35625*2.f-1.f,0.7333333333333333*-2.f+1.f,0.752952158186038,0.16423095088343498,0.9006835533663226},
    {0.3890625*2.f-1.f,0.5333333333333333*-2.f+1.f,0.5913575136605796,0.8682387110911283,0.6440592064424668},
    {0.3828125*2.f-1.f,0.43333333333333335*-2.f+1.f,0.10130198294023995,0.17797613732700612,0.2049582387495461},
    {0.5234375*2.f-1.f,0.4354166666666667*-2.f+1.f,0.06269102113945557,0.14524656226074406,0.3670306709370441},
    {0.5234375*2.f-1.f,0.4395833333333333*-2.f+1.f,0.7459651515229517,0.9514080583546352,0.4318862719259513},
    {0.5171875*2.f-1.f,0.525*-2.f+1.f,0.7374991076890932,0.17278291346239694,0.5185842815932479},
    {0.3859375*2.f-1.f,0.53125*-2.f+1.f,0.9552967908996264,0.18657376324513275,0.4354445368708668},
    {0.3875*2.f-1.f,0.59375*-2.f+1.f,0.8402089164433565,0.9226573072816314,0.8188841448588439},
    {0.3953125*2.f-1.f,0.38125*-2.f+1.f,0.36867971916427933,0.7051068387718674,0.5488833749752775},
    {0.240625*2.f-1.f,0.35625*-2.f+1.f,0.967680766565935,0.14312740917930022,0.2923030713897041},
    {0.246875*2.f-1.f,0.35625*-2.f+1.f,0.8822288677914812,0.9660093016664418,0.9520802630262367},
    {0.2515625*2.f-1.f,0.5458333333333333*-2.f+1.f,0.7686820281860296,0.7312951026158603,0.8005238025259622},
    {0.3859375*2.f-1.f,0.5791666666666667*-2.f+1.f,0.4924494772400628,0.31608894121609776,0.19280152898989011},
    {0.35*2.f-1.f,0.375*-2.f+1.f,0.03131381314048487,0.5252515222908304,0.3272673824107345},
    {0.353125*2.f-1.f,0.2708333333333333*-2.f+1.f,0.17276495722383123,0.7490613408195564,0.07773399918065826},
    {0.3015625*2.f-1.f,0.25416666666666665*-2.f+1.f,0.15119524479548896,0.09594993869602786,0.046908946439053856},
    {0.3015625*2.f-1.f,0.25416666666666665*-2.f+1.f,0.5665685385257874,0.7573552023505267,0.30994883523337546},
    {0.29375*2.f-1.f,0.3645833333333333*-2.f+1.f,0.9040884308837986,0.3701492718857834,0.7619549327447759},
    {0.35*2.f-1.f,0.36666666666666664*-2.f+1.f,0.7238477568642588,0.22330102272579555,0.35867009756101353},
    {0.2578125*2.f-1.f,0.3770833333333333*-2.f+1.f,0.3858591272333889,0.20713049297478436,0.48048717033752597},
    {0.1375*2.f-1.f,0.3729166666666667*-2.f+1.f,0.8223296278389955,0.8359575043591625,0.5951231654648546},
    {0.128125*2.f-1.f,0.50625*-2.f+1.f,0.7005372914750363,0.18037823911657735,0.6204850887966593},
    {0.134375*2.f-1.f,0.5020833333333333*-2.f+1.f,0.34232521572860275,0.031211641027046433,0.4590908228398366},
    {0.2640625*2.f-1.f,0.49583333333333335*-2.f+1.f,0.1457827915647406,0.6502857968945785,0.2085572074555918},
    {0.2484375*2.f-1.f,0.38125*-2.f+1.f,0.8333024201194695,0.16182739296885873,0.4195006946642805},
    {0.13125*2.f-1.f,0.14166666666666666*-2.f+1.f,0.5707846336192445,0.03448934480959598,0.8865780983800893},
    {0.1921875*2.f-1.f,0.14791666666666667*-2.f+1.f,0.5012504726685973,0.48669557134717845,0.2723683470331819},
    {0.1578125*2.f-1.f,0.18958333333333333*-2.f+1.f,0.1503300037461881,0.42778647661013736,0.6925701494381272},
    {0.171875*2.f-1.f,0.16458333333333333*-2.f+1.f,0.2171935190294615,0.09971955900476881,0.6118674719079159},
    {0.175*2.f-1.f,0.22291666666666668*-2.f+1.f,0.22093507078692787,0.8130990666576465,0.2723331900245738},
    {0.1859375*2.f-1.f,0.15625*-2.f+1.f,0.553731298788091,0.9072116973782728,0.6247975943711114},
    {0.1609375*2.f-1.f,0.21041666666666667*-2.f+1.f,0.9258911203932348,0.33653072211134105,0.06494045110275504},
    {0.2125*2.f-1.f,0.225*-2.f+1.f,0.2855511242834897,0.2355107055396375,0.1543039734373518},
    {0.16875*2.f-1.f,0.24583333333333332*-2.f+1.f,0.9551265566669034,0.9184090048519132,0.3730542987676788},
    {0.225*2.f-1.f,0.22708333333333333*-2.f+1.f,0.07079905235082617,0.9667802366088949,0.3516885755727488},
    {0.234375*2.f-1.f,0.12916666666666668*-2.f+1.f,0.6437277551478164,0.14576141984658775,0.5490281238584936},
    {0.240625*2.f-1.f,0.21875*-2.f+1.f,0.8168088619946917,0.9956890359398897,0.8149284574864883},
    {0.2375*2.f-1.f,0.14583333333333334*-2.f+1.f,0.7946549424748363,0.11262259461660151,0.2335707114253609},
    {0.271875*2.f-1.f,0.15*-2.f+1.f,0.7930827511438475,0.764451499502756,0.654813808016799},
    {0.234375*2.f-1.f,0.16666666666666666*-2.f+1.f,0.9812203963658108,0.6589021768003371,0.44944122800029107},
    {0.2390625*2.f-1.f,0.17708333333333334*-2.f+1.f,0.8609707126327302,0.18702118440877424,0.1581118517456771},
    {0.2703125*2.f-1.f,0.17916666666666667*-2.f+1.f,0.5198343674283395,0.01818146992478864,0.7938235469022059},
    {0.2359375*2.f-1.f,0.18958333333333333*-2.f+1.f,0.9984898572958352,0.6450404194694628,0.6625433344903469},
    {0.240625*2.f-1.f,0.21041666666666667*-2.f+1.f,0.23749519277912545,0.773084143776188,0.49705757845777754},
    {0.271875*2.f-1.f,0.20833333333333334*-2.f+1.f,0.05821658889338366,0.4910037937889511,0.5805237868944547},
    {0.2375*2.f-1.f,0.21666666666666667*-2.f+1.f,0.7663929061818611,0.7404250122842402,0.8740912491275776},
    {0.2828125*2.f-1.f,0.22083333333333333*-2.f+1.f,0.19104720384159668,0.054940850361243077,0.8758656510114534},
    {0.278125*2.f-1.f,0.13958333333333334*-2.f+1.f,0.5606824904930601,0.09443270409501026,0.9063168375649939},
    {0.29375*2.f-1.f,0.21666666666666667*-2.f+1.f,0.8643380578062229,0.2879502508233197,0.6431461745601638},
    {0.28125*2.f-1.f,0.15416666666666667*-2.f+1.f,0.25377428409628877,0.9629539715147526,0.8001961151456221},
    {0.3171875*2.f-1.f,0.1625*-2.f+1.f,0.2304462328867808,0.2148355122816068,0.3474751754134273},
    {0.284375*2.f-1.f,0.17291666666666666*-2.f+1.f,0.038728173429083634,0.684442283052811,0.045356654605746116},
    {0.2765625*2.f-1.f,0.1875*-2.f+1.f,0.3628474025547108,0.6154805868942141,0.8739019776339378},
    {0.31875*2.f-1.f,0.19166666666666668*-2.f+1.f,0.6193822361003993,0.8645154796701113,0.9693679135155719},
    {0.2828125*2.f-1.f,0.19375*-2.f+1.f,0.5683934476554218,0.03826109536437716,0.3391985449797814},
    {0.2890625*2.f-1.f,0.20625*-2.f+1.f,0.5783558296984451,0.8779698393996885,0.7128697208516263},
    {0.3265625*2.f-1.f,0.2125*-2.f+1.f,0.6477849876172677,0.5608443871821498,0.2043958260249381},
    {0.2890625*2.f-1.f,0.2125*-2.f+1.f,0.9440990314394636,0.31513331742062656,0.05167719570022389},
    {0.3328125*2.f-1.f,0.22291666666666668*-2.f+1.f,0.8611381447891906,0.5715059224914247,0.37120982732623964},
    {0.3296875*2.f-1.f,0.14166666666666666*-2.f+1.f,0.14225046553463028,0.9972191617874819,0.47093315445391015},
    {0.340625*2.f-1.f,0.21041666666666667*-2.f+1.f,0.824331522859807,0.9813585942830353,0.1523758976534716},
    {0.3359375*2.f-1.f,0.18125*-2.f+1.f,0.5578822984011089,0.11894160173322121,0.4026977055885924},
    {0.371875*2.f-1.f,0.14583333333333334*-2.f+1.f,0.7552671627867056,0.6577276613856289,0.552086122814371},
    {0.3359375*2.f-1.f,0.16041666666666668*-2.f+1.f,0.3573681926255141,0.9456222825544438,0.9095281688296285},
    {0.3359375*2.f-1.f,0.17291666666666666*-2.f+1.f,0.5684430509400522,0.39197330364891825,0.8685240552276019},
    {0.3703125*2.f-1.f,0.21458333333333332*-2.f+1.f,0.8349543325624093,0.17990037822432647,0.8721686704313241},
    {0.3375*2.f-1.f,0.18333333333333332*-2.f+1.f,0.43746502537676435,0.7099845945017079,0.8484923046137188},
    {-1.f, 1.f, 1.f, 1.f, 1.f},
    {-1.f, 0.9f, 1.f, 1.f, 1.f},
    {1.f, 0.95f, 1.f, 1.f, 1.f}
};

static const char* vertex_shader_text =
"#version 110\n"
"uniform mat4 MVP;\n"
"attribute vec3 vCol;\n"
"attribute vec2 vPos;\n"
"varying vec3 color;\n"
"void main()\n"
"{\n"
"    gl_Position = MVP * vec4(vPos, 0.0, 1.0);\n"
"    color = vCol;\n"
"}\n";

static const char* fragment_shader_text =
"#version 110\n"
"varying vec3 color;\n"
"void main()\n"
"{\n"
"    gl_FragColor = vec4(color, 1.0);\n"
"}\n";

static void error_callback(int error, const char* description)
{
    fprintf(stderr, "Error: %s\n", description);
}
static void key_callback(GLFWwindow* window, int key, int scancode, int action, int mods)
{
    if (key == GLFW_KEY_ESCAPE && action == GLFW_PRESS) {
        glfwSetWindowShouldClose(window, GLFW_TRUE);
    } else if (key == GLFW_KEY_X && action == GLFW_PRESS) {
        vertices[98].x -= 0.1f;
        std::cout << vertices[98].x << std::endl;
    };
}

int main(void)
{
    GLFWwindow* window;
    GLuint vertex_buffer, vertex_shader, fragment_shader, program;
    GLint mvp_location, vpos_location, vcol_location;

    glfwSetErrorCallback(error_callback);

    if (!glfwInit())
        exit(EXIT_FAILURE);

    glfwWindowHint(GLFW_CONTEXT_VERSION_MAJOR, 2);
    glfwWindowHint(GLFW_CONTEXT_VERSION_MINOR, 0);

    window = glfwCreateWindow(640, 480, "VOLARANT", NULL, NULL);
    if (!window)
    {
        glfwTerminate();
        exit(EXIT_FAILURE);
    }

    GLFWimage images[1]{};
    images[0].pixels = stbi_load("icon.png", &images[0].width, &images[0].height, 0, 4); //rgba channels 
    glfwSetWindowIcon(window, 1, images);
    stbi_image_free(images[0].pixels);

    glfwSetKeyCallback(window, key_callback);

    glfwMakeContextCurrent(window);
    gladLoadGL();
    glfwSwapInterval(1);

    // NOTE: OpenGL error checks have been omitted for brevity

    glGenBuffers(1, &vertex_buffer);
    glBindBuffer(GL_ARRAY_BUFFER, vertex_buffer);

    vertex_shader = glCreateShader(GL_VERTEX_SHADER);
    glShaderSource(vertex_shader, 1, &vertex_shader_text, NULL);
    glCompileShader(vertex_shader);

    fragment_shader = glCreateShader(GL_FRAGMENT_SHADER);
    glShaderSource(fragment_shader, 1, &fragment_shader_text, NULL);
    glCompileShader(fragment_shader);

    program = glCreateProgram();
    glAttachShader(program, vertex_shader);
    glAttachShader(program, fragment_shader);
    glLinkProgram(program);

    mvp_location = glGetUniformLocation(program, "MVP");
    vpos_location = glGetAttribLocation(program, "vPos");
    vcol_location = glGetAttribLocation(program, "vCol");

    glEnableVertexAttribArray(vpos_location);
    glVertexAttribPointer(vpos_location, 2, GL_FLOAT, GL_FALSE,
        sizeof(vertices[0]), (void*)0);
    glEnableVertexAttribArray(vcol_location);
    glVertexAttribPointer(vcol_location, 3, GL_FLOAT, GL_FALSE,
        sizeof(vertices[0]), (void*)(sizeof(float) * 2));

    while (!glfwWindowShouldClose(window))
    {
        float ratio;
        int width, height;
        mat4x4 m, p, mvp;
        glBufferData(GL_ARRAY_BUFFER, sizeof(vertices), vertices, GL_STATIC_DRAW);

        glfwGetFramebufferSize(window, &width, &height);
        ratio = width / (float)height;

        glViewport(0, 0, width, height);
        glClear(GL_COLOR_BUFFER_BIT);

        mat4x4_identity(m);
        //mat4x4_rotate_Z(m, m, (float)glfwGetTime());
        mat4x4_ortho(p, -ratio, ratio, -1.f, 1.f, 1.f, -1.f);
        mat4x4_mul(mvp, p, m);

        glUseProgram(program);
        glUniformMatrix4fv(mvp_location, 1, GL_FALSE, (const GLfloat*)mvp);
        glDrawArrays(GL_TRIANGLES, 0, sizeof(vertices) / 5);

        glfwSwapBuffers(window);
        glfwPollEvents();
    }

    glfwDestroyWindow(window);

    glfwTerminate();
    exit(EXIT_SUCCESS);
}